{"backend_state":"ready","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-1a3bd007-b294-4506-b06c-d059399f9f97.json","kernel":"python3","kernel_error":"Kernel exited with code 1.\n...\nTraceback (most recent call last):\n  File \"/usr/lib/python3.8/runpy.py\", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File \"/usr/lib/python3.8/runpy.py\", line 87, in _run_code\n    exec(code, run_globals)\n  File \"/usr/local/lib/python3.8/dist-packages/ipykernel/__main__.py\", line 3, in <module>\n    app.launch_new_instance()\n  File \"/usr/local/lib/python3.8/dist-packages/traitlets/config/application.py\", line 663, in launch_instance\n    app.initialize(argv)\n  File \"<decorator-gen-124>\", line 2, in initialize\n  File \"/usr/local/lib/python3.8/dist-packages/traitlets/config/application.py\", line 87, in catch_config_error\n    return method(app, *args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/ipykernel/kernelapp.py\", line 567, in initialize\n    self.init_sockets()\n  File \"/usr/local/lib/python3.8/dist-packages/ipykernel/kernelapp.py\", line 271, in init_sockets\n    self.shell_port = self._bind_socket(self.shell_socket, self.shell_port)\n  File \"/usr/local/lib/python3.8/dist-packages/ipykernel/kernelapp.py\", line 218, in _bind_socket\n    return self._try_bind_socket(s, port)\n  File \"/usr/local/lib/python3.8/dist-packages/ipykernel/kernelapp.py\", line 194, in _try_bind_socket\n    s.bind(\"tcp://%s:%i\" % (self.ip, port))\n  File \"zmq/backend/cython/socket.pyx\", line 550, in zmq.backend.cython.socket.Socket.bind\n  File \"zmq/backend/cython/checkrc.pxd\", line 26, in zmq.backend.cython.checkrc._check_rc\nzmq.error.ZMQError: Address already in use\n","kernel_state":"idle","kernel_usage":{"cpu":21.40221402208965,"memory":38621184},"metadata":{"anaconda-cloud":{},"hide_input":false,"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"9407f8","input":"import pandas as pd\nmedals = pd.read_csv('all_medalists.csv')\nprint(medals.head())","output":{"0":{"name":"stdout","output_type":"stream","text":"     City  Edition     Sport Discipline             Athlete  NOC Gender  \\\n0  Athens     1896  Aquatics   Swimming       HAJOS, Alfred  HUN    Men   \n1  Athens     1896  Aquatics   Swimming    HERSCHMANN, Otto  AUT    Men   \n2  Athens     1896  Aquatics   Swimming   DRIVAS, Dimitrios  GRE    Men   \n3  Athens     1896  Aquatics   Swimming  MALOKINIS, Ioannis  GRE    Men   \n4  Athens     1896  Aquatics   Swimming  CHASAPIS, Spiridon  GRE    Men   \n\n                        Event Event_gender   Medal  \n0              100m freestyle            M    Gold  \n1              100m freestyle            M  Silver  \n2  100m freestyle for sailors            M  Bronze  \n3  100m freestyle for sailors            M    Gold  \n4  100m freestyle for sailors            M  Silver  \n"}},"pos":3,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":10,"id":"e6749c","input":"# Create most_medals \nmost_medals = ____\nprint(most_medals)","output":{"0":{"name":"stdout","output_type":"stream","text":"Edition\n1952    USA\n1956    URS\n1960    URS\n1964    URS\n1968    URS\n1972    URS\n1976    URS\n1980    URS\n1984    USA\n1988    URS\ndtype: object\n"}},"pos":34,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":11,"id":"1d0ff8","input":"# Print most_medals.value_counts()\nprint(____)","output":{"0":{"name":"stdout","output_type":"stream","text":"URS    8\nUSA    2\ndtype: int64\n"}},"pos":35,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":12,"id":"be9b2c","input":"import matplotlib.pyplot as plt\n%matplotlib inline\n# Create the DataFrame: usa\nusa = ____\n\n# Group usa by ['Edition', 'Medal'] and aggregate over 'Athlete'\nusa_medals_by_year = ____\nprint(usa_medals_by_year.head())","output":{"0":{"name":"stdout","output_type":"stream","text":"Edition  Medal \n1896     Bronze     2\n         Gold      11\n         Silver     7\n1900     Bronze    14\n         Gold      27\nName: Athlete, dtype: int64\n"}},"pos":39,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":13,"id":"350c56","input":"# Reshape usa_medals_by_year by unstacking\nusa_medals_by_year = ____\nprint(usa_medals_by_year.head())","output":{"0":{"name":"stdout","output_type":"stream","text":"Medal    Bronze  Gold  Silver\nEdition                      \n1896          2    11       7\n1900         14    27      14\n1904        111   146     137\n1908         15    34      14\n1912         31    45      25\n"}},"pos":40,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":14,"id":"8dc246","input":"# Plot the DataFrame usa_medals_by_year\nusa_medals_by_year.plot()\nplt.show()","output":{"0":{"data":{"image/png":"2ea5f4d86d181b155dcca7ff381ae09f88675fe1","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":14,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":41,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":15,"id":"fbd30d","input":"# Create the DataFrame: usa\nusa = medals[medals.NOC == 'USA']\n\n# Group usa by 'Edition', 'Medal', and 'Athlete'\nusa_medals_by_year = usa.groupby(['Edition', 'Medal'])['Athlete'].count()\n\n# Reshape usa_medals_by_year by unstacking\nusa_medals_by_year = usa_medals_by_year.unstack(level='Medal')\n\n# Create an area plot of usa_medals_by_year\n____\nplt.show()","output":{"0":{"data":{"image/png":"8fe9475df0ad33b08ec303e2c545cdbd733ca56b","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":15,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":44,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"1ff628","input":"# Redefine 'Medal' as an ordered categorical\nmedals.Medal = ____\n\n# Create the DataFrame: usa\nusa = medals[medals.NOC == 'USA']\n\n# Group usa by 'Edition', 'Medal', and 'Athlete'\nusa_medals_by_year = usa.groupby(['Edition', 'Medal'])['Athlete'].count()\n\n# Reshape usa_medals_by_year by unstacking\nusa_medals_by_year = usa_medals_by_year.unstack(level='Medal')\n\n# Create an area plot of usa_medals_by_year\nusa_medals_by_year.plot.area()\nplt.show()","output":{"0":{"data":{"image/png":"e2a93385858746dceef955576d79b7442f54929f","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":16,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":47,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0dc23a","input":"# Select the 'NOC' column of medals: country_names\ncountry_names = ____\n\n# Count the number of medals won by each country: medal_counts\nmedal_counts = ____\n\n# Print top 15 countries ranked by medals\nprint(medal_counts.head(15))","output":{"0":{"name":"stdout","output_type":"stream","text":"USA    4335\nURS    2049\nGBR    1594\nFRA    1314\nITA    1228\nGER    1211\nAUS    1075\nHUN    1053\nSWE    1021\nGDR     825\nNED     782\nJPN     704\nCHN     679\nRUS     638\nROU     624\nName: NOC, dtype: int64\n"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"f33758","input":"# Construct the pivot table: counted\ncounted = ____\n\n# Create the new column: counted['totals']\ncounted['totals'] = counted.sum(____)\n\n# Sort counted by the 'totals' column\ncounted = counted.sort_values(____, ____)\n\n# Print the top 15 rows of counted\nprint(counted.head(15))","output":{"0":{"name":"stdout","output_type":"stream","text":"Medal  Bronze    Gold  Silver  totals\nNOC                                  \nUSA    1052.0  2088.0  1195.0  4335.0\nURS     584.0   838.0   627.0  2049.0\nGBR     505.0   498.0   591.0  1594.0\nFRA     475.0   378.0   461.0  1314.0\nITA     374.0   460.0   394.0  1228.0\nGER     454.0   407.0   350.0  1211.0\nAUS     413.0   293.0   369.0  1075.0\nHUN     345.0   400.0   308.0  1053.0\nSWE     325.0   347.0   349.0  1021.0\nGDR     225.0   329.0   271.0   825.0\nNED     320.0   212.0   250.0   782.0\nJPN     270.0   206.0   228.0   704.0\nCHN     193.0   234.0   252.0   679.0\nRUS     240.0   192.0   206.0   638.0\nROU     282.0   155.0   187.0   624.0\n"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"312934","input":"# Select columns: ev_gen\nev_gen = ____\n\n# Drop duplicate pairs: ev_gen_uniques\nev_gen_uniques = ____\n\n# Print ev_gen_uniques\nprint(ev_gen_uniques)","output":{"0":{"name":"stdout","output_type":"stream","text":"      Event_gender Gender\n0                M    Men\n348              X    Men\n416              W  Women\n639              X  Women\n23675            W    Men\n"}},"pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"8e6ff0","input":"# Group medals by the two columns: medals_by_gender\nmedals_by_gender = ____\n\n# Create a DataFrame with a group count: medal_count_by_gender\nmedal_count_by_gender = ____\n\n# Print medal_count_by_gender\nprint(medal_count_by_gender)","output":{"0":{"name":"stdout","output_type":"stream","text":"                      City  Edition  Sport  Discipline  Athlete    NOC  Event  \\\nEvent_gender Gender                                                             \nM            Men     20067    20067  20067       20067    20067  20067  20067   \nW            Men         1        1      1           1        1      1      1   \n             Women    7277     7277   7277        7277     7277   7277   7277   \nX            Men      1653     1653   1653        1653     1653   1653   1653   \n             Women     218      218    218         218      218    218    218   \n\n                     Medal  \nEvent_gender Gender         \nM            Men     20067  \nW            Men         1  \n             Women    7277  \nX            Men      1653  \n             Women     218  \n"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"4cf4f4","input":"# Create the Boolean Series: sus\nsus = ____\n\n# Create a DataFrame with the suspicious row: suspect\nsuspect = ____\n\n# Print suspect\nprint(suspect)","output":{"0":{"name":"stdout","output_type":"stream","text":"         City  Edition      Sport Discipline            Athlete  NOC Gender  \\\n23675  Sydney     2000  Athletics  Athletics  CHEPCHUMBA, Joyce  KEN    Men   \n\n          Event Event_gender   Medal  \n23675  marathon            W  Bronze  \n"}},"pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"888f70","input":"# Group medals by 'NOC': country_grouped\ncountry_grouped = ____\n\n# Compute the number of distinct sports in which each country won medals: Nsports\nNsports = ____\n\n# Sort the values of Nsports in descending order\nNsports = ___\n\n# Print the top 15 rows of Nsports\nprint(Nsports.head(15))","output":{"0":{"name":"stdout","output_type":"stream","text":"NOC\nUSA    34\nGBR    31\nFRA    28\nGER    26\nCHN    24\nAUS    22\nESP    22\nCAN    22\nSWE    21\nURS    21\nITA    21\nNED    20\nRUS    20\nJPN    20\nDEN    19\nName: Sport, dtype: int64\n"}},"pos":25,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"55d943","input":"# Extract all rows for which the 'Edition' is between 1952 & 1988: during_cold_war\nduring_cold_war = ____\n\n# Extract rows for which 'NOC' is either 'USA' or 'URS': is_usa_urs\nis_usa_urs = medals.NOC.isin(____)\n\n# Use during_cold_war and is_usa_urs to create the DataFrame: cold_war_medals\ncold_war_medals = medals.loc[____ & ____]\n\n# Group cold_war_medals by 'NOC'\ncountry_grouped = ____\n\n# Create Nsports\nNsports = ____\n\n# Print Nsports\nprint(Nsports)","output":{"0":{"name":"stdout","output_type":"stream","text":"NOC\nURS    21\nUSA    20\nName: Sport, dtype: int64\n"}},"pos":29,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"bac012","input":"# Create the pivot table: medals_won_by_country\nmedals_won_by_country = ____\n\n# Slice medals_won_by_country: cold_war_usa_urs_medals\ncold_war_usa_urs_medals = medals_won_by_country.loc[____, [____,____]]\nprint(cold_war_usa_usr_medals)","output":{"0":{"name":"stdout","output_type":"stream","text":"NOC        USA    URS\nEdition              \n1952     130.0  117.0\n1956     118.0  169.0\n1960     112.0  169.0\n1964     150.0  174.0\n1968     149.0  188.0\n1972     155.0  211.0\n1976     155.0  285.0\n1980       NaN  442.0\n1984     333.0    NaN\n1988     193.0  294.0\n"}},"pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0a377c","input":"## Grouping and aggregating","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0facd8","input":"**Використані джерела:**\n- datacamp.com","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"192f81","input":"Interestingly, the USSR is not in the top 5 in this category, while the USA continues to remain on top. What could be the cause of this?","pos":26,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1f9d29","input":"Here, once again, the USSR comes out on top.","pos":36,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"21b418","input":"You will now use `.groupby()` to continue your exploration. Your job is to group by `'Event_gender'` and `'Gender'` and count the rows.\n\nYou will see that there is only one suspicious row: This is likely a data error.\n\nThe DataFrame is available to you as `medals`.\n\n**Instructions**\n- Group `medals` by `'Event_gender'` and `'Gender'`.\n- Create a `medal_count_by_gender` DataFrame with a group count using the `.count()` method.\n- Print `medal_count_by_gender`. This has been done for you.","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"357eb7","input":"## Finding possible errors with .groupby()","pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"380861","input":"Given the goal of finding the total number of USA medals awarded per edition, what column should you select and which aggregation method should you use?\n\n**Possible Answers**\n- `USA_edition_grouped['City'].mean()`\n- `USA_edition_grouped['Athlete'].sum()`\n- `USA_edition_grouped['Medal'].count()`\n- `USA_edition_grouped['Gender'].first()`","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3815c6","input":"The Olympic medal data for the following exercises comes from __[The Guardian](https://www.theguardian.com/sport/datablog/2012/jun/25/olympic-medal-winner-list-data)__. It comprises records of all events held at the Olympic games between 1896 and 2012.\n\nSuppose you have loaded the data into a DataFrame `medals`. You now want to find the total number of medals awarded to the USA per edition. To do this, filter the `'USA'` rows and use the `groupby()` function to put the `'Edition'` column on the index:\n> `USA_edition_grouped = medals.loc[medals.NOC == 'USA'].groupby('Edition')`","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"3c56c0","input":"The Olympic competitions between 1952 and 1988 took place during the height of the Cold War between the United States of America (USA) & the Union of Soviet Socialist Republics (USSR). Your goal in this exercise is to aggregate the number of distinct sports in which the USA and the USSR won medals during the Cold War years.\n\nThe construction is mostly the same as in the preceding exercise. There is an additional filtering stage beforehand in which you reduce the original DataFrame `medals` by extracting data from the Cold War period that applies only to the US or to the USSR. The relevant country codes in the DataFrame, which has been pre-loaded as `medals`, are `'USA'` & `'URS'`.\n\n**Instructions**\n- Using `medals`, create a Boolean Series called `during_cold_war` that is `True` when `'Edition'` is `>= 1952` and `<= 1988`.\n- Using `medals`, create a Boolean Series called `is_usa_urs` that is `True` when `'NOC'` is either `'USA'` or `'URS'`.\n- Filter the `medals` DataFrame using `during_cold_war` and `is_usa_urs` to create a new DataFrame called `cold_war_medals`.\n- Group `cold_war_medals` by `'NOC'`.\n- Create a Series `Nsports` from `country_grouped` using indexing & chained methods:\n  - Extract the column `'Sport'`.\n  - Use `.nunique()` to get the number of unique elements in each group;\n  - Apply `.sort_values(ascending=False)` to rearrange the Series.\n- Print the final Series `Nsports`. This has been done for you.","pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"424bf4","input":"As in the previous exercise, your job in this exercise is to visualize the medal counts by `'Edition'` for the USA. This time, you will use an area plot to see the breakdown better. The `usa` DataFrame has been created and all reshaping from the previous exercise has been done. You need to write the plotting command.\n\n**Instructions**\n- Create an area plot of `usa_medals_by_year`. This can be done by using `.plot.area()`.","pos":43,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"579f9e","input":"## Using .pivot_table() to count medals by type","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"590a29","input":"As you can see, the USSR is actually higher than the US when you look only at the Olympic competitions between 1952 and 1988!","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"620e95","input":"## Using .nunique() to rank by distinct sports","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6c0f01","input":"You may have noticed that the medals are ordered according to a lexicographic (dictionary) ordering: `Bronze` < `Gold` < `Silver`. However, you would prefer an ordering consistent with the Olympic rules: `Bronze` < `Silver` < `Gold`.\n\nYou can achieve this using `Categorical` types. In this final exercise, after redefining the `'Medal'` column of the DataFrame `medals`, you will repeat the area plot from the previous exercise to see the new ordering.\n\n**Instructions**\n- Redefine the `'Medal'` column of the DataFrame `medals` as an ordered categorical. To do this, use `pd.Categorical()` with three keyword arguments:\n  - `values = medals.Medal`.\n  - `categories=['Bronze', 'Silver', 'Gold']`.\n  - `ordered=True`.\n  - After this, you can verify that the type has changed using `medals.info()`.\n- Plot the final DataFrame `usa_medals_by_year` as an area plot. This has been done for you.","pos":46,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"797aef","input":"It looks like the top 5 countries here are `USA`, `URS`, `GBR`, `FRA`, and `ITA`.","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7b5273","input":"## Applying .drop_duplicates()","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7e09a6","input":"# Summer Olympics","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"844fbe","input":"Rather than ranking countries by total medals won and showing that list, you may want to see a bit more detail. You can use a pivot table to compute how many separate bronze, silver and gold medals each country won. That pivot table can then be used to repeat the previous computation to rank by total medals won.\n\nIn this exercise, you will use `.pivot_table()` first to aggregate the total medals by type. Then, you can use `.sum()` along the columns of the pivot table to produce a new column. When the modified pivot table is sorted by the total medals column, you can display the results from the last exercise with a bit more detail.\n\n**Instructions**\n- Construct a pivot table `counted` from the DataFrame `medals` aggregating by `count`. Use `'NOC'` as the index, `'Athlete'` for the values, and `'Medal'` for the columns.\n- Modify the DataFrame `counted` by adding a column `counted['totals']`. The new column `'totals'` should contain the result of taking the sum along the columns (i.e., use `.sum(axis='columns')`).\n- Overwrite the DataFrame `counted` by sorting it with the `.sort_values()` method. Specify the keyword argument `ascending=False`.\n- Print the first 15 rows of `counted` using `.head(15)`. This has been done for you.","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"87f1d2","input":"You have to always watch out for errors like this in your data.","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"880818","input":"You may want to know which countries won medals in the most distinct sports. The `.nunique()` method is the principal aggregation here. Given a categorical Series `S`, `S.nunique()` returns the number of distinct categories.\n\n**Instructions**\n- Group `medals` by `'NOC'`.\n- Compute the number of distinct sports in which each country won medals. To do this, select the `'Sport'` column from `country_grouped` and apply `.nunique()`.\n- Sort `Nsports` in descending order with `.sort_values()` and `ascending=False`.\n- Print the first 15 rows of `Nsports`. This has been done for you.","pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8ead8a","input":"## Counting USA vs. USSR Cold War Olympic Sports","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9277b1","input":"## Visualizing USA Medal Counts by Edition: Area Plot","pos":42,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9a37ba","input":"You will now inspect the suspect record by locating the offending row.\n\nYou will see that, according to the data, Joyce Chepchumba was a man that won a medal in a women's event. That is a data error as you can confirm with a web search.\n\n**Instructions**\n- Create a Boolean Series with a condition that captures the only row that has `medals.Event_gender == 'W'` and `medals.Gender == 'Men'`. Be sure to use the `&` operator.\n- Use the Boolean Series to create a DataFrame called `suspect` with the suspicious row.\n- Print `suspect`. This has been done for you.","pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9ca91e","input":"What could be the difference between the `'Event_gender'` and `'Gender'` columns? You should be able to evaluate your guess by looking at the unique values of the pairs `(Event_gender, Gender)` in the data. In particular, you should not see something like `(Event_gender='M', Gender='Women')`. However, you will see that, strangely enough, there is an observation with `(Event_gender='W', Gender='Men')`.\n\nThe duplicates can be dropped using the `.drop_duplicates()` method, leaving behind the unique observations. The DataFrame has been loaded as `medals`.\n\n**Instructions**\n- Select the columns `'Event_gender'` and `'Gender'`.\n- Create a dataframe `ev_gen_uniques` containing the unique pairs contained in `ev_gen`.\n- Print `ev_gen_uniques`. This has been done for you.","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a676f3","input":"## Visualizing USA Medal Counts by Edition: Line Plot","pos":37,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"af375d","input":"For this exercise, you want to see which country, the USA or the USSR, won the most medals consistently over the Cold War period.\n\nThere are several steps involved in carrying out this computation.\n\n- You'll need a pivot table with years (`'Edition'`) on the index and countries (`'NOC'`) on the columns. The entries will be the total number of medals each country won that year. If the country won no medals in a given edition, expect a `NaN` in that entry of the pivot table.\n- You'll need to slice the Cold War period and subset the `'USA'` and `'URS'` columns.\n- You'll need to make a Series from this slice of the pivot table that tells which country won the most medals in that edition using `.idxmax(axis='columns')`. If `.max()` returns the maximum value of Series or 1D array, `.idxmax()` returns the index of the maximizing element. The argument `axis=columns` or `axis=1` is required because, by default, this aggregation would be done along columns for a DataFrame.\n- The final Series contains either `'USA'` or `'URS'` according to which country won the most medals in each Olympic edition. You can use `.value_counts()` to count the number of occurrences of each.\n\n**Instructions**\n- Construct `medals_won_by_country` using `medals.pivot_table()`.\n  - The index should be the years (`'Edition'`) & the columns should be country (`'NOC'`)\n  - The values should be `'Athlete'` (which captures every medal regardless of kind) & the aggregation method should be `'count'` (which captures the total number of medals won).\n- Create `cold_war_usa_urs_medals` by slicing the pivot table `medals_won_by_country`. Your slice should contain the editions from years `1952:1988` and only the columns `'USA'` & `'URS'` from the pivot table.\n- Create the Series `most_medals` by applying the `.idxmax()` method to `cold_war_usa_urs_medals`. Be sure to use `axis='columns'`.\n- Print the result of applying `.value_counts()` to `most_medals`. The result reported gives the number of times each of the USA or the USSR won more Olympic medals in total than the other between 1952 and 1988.","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ba57d7","input":"For this exercise, you will use the pandas Series method `.value_counts()` to determine the top 15 countries ranked by total number of medals.\n\nNotice that `.value_counts()` sorts by values by default. The result is returned as a Series of counts indexed by unique entries from the original Series with values (counts) ranked in descending order.\n\nThe DataFrame has been pre-loaded for you as `medals`.\n\n**Instructions**\n- Extract the `'NOC'` column from the DataFrame`medals` and assign the result to `country_names`. Notice that this Series has repeated entries for every medal (of any type) a country has won in any Edition of the Olympics.\n- Create a Series `medal_counts` by applying `.value_counts()` to the Series `country_names`.\n- Print the top 15 countries ranked by total number of medals won. This has been done for you, so hit 'Submit Answer' to see the result.","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bea292","input":"Your job in this exercise is to visualize the medal counts by `'Edition'` for the USA. The DataFrame has been pre-loaded for you as `medals`.\n\n**Instructions**\n- Create a DataFrame `usa` with data only for the USA.\n- Group `usa` such that `['Edition', 'Medal']` is the index. Aggregate the count over `'Athlete'`.\n- Use `.unstack()` with `level='Medal'` to reshape the DataFrame `usa_medals_by_year`.\n- Construct a line plot from the final DataFrame `usa_medals_by_year`. This has been done for you.","pos":38,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cd612e","input":"## Counting USA vs. USSR Cold War Olympic Medals","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e22d32","input":"## Visualizing USA Medal Counts by Edition: Area Plot with Ordered Medals","pos":45,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ec6440","input":"## Using .value_counts() for ranking","pos":6,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f0c47e","input":"## Locating suspicious data","pos":19,"state":"done","type":"cell"}
{"id":0,"time":1607007751835,"type":"user"}
{"last_load":1607011336984,"type":"file"}